1. How many threads are you going to use? Specify the task that you intend each thread to perform.
    every customers take one thread, and each customer thread will do calculate arrive time, start time and finish time.


2. Do the threads work independently? Or, is there an overall “controller” thread?
    they are not working independently, since they need another thread to signal the condva. And there is not any controller thread. 

3. How many mutexes are you going to use? Specify the operation that each mutex will guard.
    one mutex. only lock when add customers infomation into the queue.

4. Will the main thread be idle? If not, what will it be doing?
    yes, when customer threads working, the main thread will be idle.

5. How are you going to represent customers? what type of data structure will you use?
    They are in a struct, and i made a list of struct to store all the customers infomation

6. How are you going to ensure that data structures in your program will not be modified concurrently?
    I use mutex lock when i adding data into queue.

7. How many convars are you going to use? For each convar:
    one convars
(a) Describe the condition that the convar will represent.
    stop the thread when all clerk are not availabble

(b) Which mutex is associated with the convar? Why?
    the mutex of locking the queues, since if convar stops the threads when all clerks are busy, we still need other customers into the queue
(c) What operation should be performed once pthread cond wait() has been unblocked and re-acquired the
mutex?
    after unlock the wait(), it will be locked by mutex again

8. Briefly sketch the overall algorithm you will use. You may use sentences such as:
    I only have threads for customers, and use mutex lock to ensure that only one thread can operate the queue, then if clerks are busy, unlock mutex and wait() wait for next clerk availabble.
    then start servive and finish servive parts can be operate concurrently.